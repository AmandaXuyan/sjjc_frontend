{"remainingRequest":"/Users/amanda/sjjc_frontend/node_modules/babel-loader/lib/index.js!/Users/amanda/sjjc_frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/amanda/sjjc_frontend/src/api/chart.js","dependencies":[{"path":"/Users/amanda/sjjc_frontend/src/api/chart.js","mtime":1622715920919},{"path":"/Users/amanda/sjjc_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/amanda/sjjc_frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/amanda/sjjc_frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgYXhpb3MgfSBmcm9tICdAL3V0aWxzL3JlcXVlc3QnOwp2YXIgYXBpID0gewogIGNoYXJ0UHJlOiAnL2FwaS9jaGFydCcKfTsKLyoqCiAqIOaQnOe0ouWFrOWPuOWQjeaIluS6uuWQjeW+l+WIsOS4juWFtuacieWFs+eahOWFrOWPuCzlj4rlkITkuKrlhazlj7jkuK3nmoTmnIDlpKfogqHkuJzvvIzov5Tlm57nn6Xor4blm77osLHnmoTmlbDmja4KICogQHBhcmFtIHNlYXJjaE5hbWUg5pCc57Si55qE5YWs5Y+45ZCN5oiW5Lq65ZCNCiAqIEByZXR1cm5zIHsqfSDov5Tlm57kuIvnuqfmjqfogqHlhazlj7jvvIzku6Xlj4rlkITkuKrlhazlj7jnmoTmnIDlpKfogqHkuJwKICogWwoge2dyb3VwOiAnbm9kZXMnLCBkYXRhOiB7J2lkJzogJ24xJywgJ25hbWUnOiAn5p2O5L+K5p2wICcsfSwgY2xhc3NlczogJ2NsYXNzZXMtQScsIHBvc2l0aW9uOiB7eDogMjAwLCB5OiA1MH19LAoge2dyb3VwOiAnZWRnZXMnLCBkYXRhOiB7aWQ6ICdlMScsIG5hbWU6ICfmmK8nLCBzb3VyY2U6ICfmnY7kv4rmnbAnLCB0YXJnZXQ6ICfph47njKonfSxjbGFzc2VzOidyZWxhdGlvbkInfSwKIF0KIFRPRE86Y2xhc3Nlc+agueaNruWQjuerr+WRveWQjeadpQogKi8KCmV4cG9ydCBmdW5jdGlvbiBmaW5kUmVsYXRlZENvbXBhbmllc0FQSShzZWFyY2hOYW1lKSB7CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGUKICBjb25zb2xlLmxvZygiZmluZFJlbGF0ZWRDb21wYW5pZXNBUEk6c2VhcmNoTmFtZS0tLS0iICsgc2VhcmNoTmFtZSk7CiAgcmV0dXJuIGF4aW9zKHsKICAgIHVybDogIiIuY29uY2F0KGFwaS5jaGFydFByZSwgIi9maW5kUmVsYXRlZENvbXBhbmllcy8iKS5jb25jYXQoc2VhcmNoTmFtZSksCiAgICBtZXRob2Q6ICdHRVQnCiAgfSk7Cn0KLyoqCiAqIOWQkeS4iuafpeivouivpeWFrOWPuOaYr+WQpuacieS4iue6p+WFrOWPuOaOp+WItu+8jOafpeivouaJvuWIsOacgOe7iOaOp+iCoeS6ui/lhazlj7gKICogQHBhcmFtIHNlYXJjaE5hbWUKICogQHJldHVybnMgeyp9IOi/lOWbnuacieacgOe7iOaOp+iCoeS6uueahOefpeivhuWbvuiwse+8jAogKiBbCiB7Z3JvdXA6ICdub2RlcycsIGRhdGE6IHsnaWQnOiAnbjEnLCAnbmFtZSc6ICfmnY7kv4rmnbAgJyx9LCBjbGFzc2VzOiAnY2xhc3Nlcy1BJywgcG9zaXRpb246IHt4OiAyMDAsIHk6IDUwfX0sCiB7Z3JvdXA6ICdlZGdlcycsIGRhdGE6IHtpZDogJ2UxJywgbmFtZTogJ+aYrycsIHNvdXJjZTogJ+adjuS/iuadsCcsIHRhcmdldDogJ+mHjueMqid9LGNsYXNzZXM6J3JlbGF0aW9uQid9LAogXQogKiBUT0RPOuacgOe7iOi/lOWbnuWkmuWwkeaVsOaNrui/mOimgeiuqOiuuuS4gOS4iwogKi8KCmV4cG9ydCBmdW5jdGlvbiBmaW5kVXBDb21wYW5pZXNBUEkoc2VhcmNoTmFtZSkgewogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlCiAgY29uc29sZS5sb2coImZpbmRVcENvbXBhbmllc0FQSTpzZWFyY2hOYW1lLS0tLSIgKyBzZWFyY2hOYW1lKTsKICByZXR1cm4gYXhpb3MoewogICAgdXJsOiAiIi5jb25jYXQoYXBpLmNoYXJ0UHJlLCAiL2ZpbmRVcENvbXBhbmllcy8iKS5jb25jYXQoc2VhcmNoTmFtZSksCiAgICBtZXRob2Q6ICdHRVQnCiAgfSk7Cn0KLyoqCiAqIOafpeivouWFrOWPuOmjjumZqe+8jOi/lOWbnuWMheaLrOmjjumZqeeahOefpeivhuWbvuiwseaVsOaNrgogKiBAcGFyYW0gY29tcGFueU5hbWUg5YWs5Y+45ZCN56ewCiAqIEByZXR1cm5zIHsqfSDov5Tlm57orqHnrpfpo47pmanmtonlj4rliLDnmoTlhazlj7jvvIzku6Xlj4rjgILjgILjgIIKICogWwoge2dyb3VwOiAnbm9kZXMnLCBkYXRhOiB7J2lkJzogJ24xJywgJ25hbWUnOiAn5p2O5L+K5p2wICcsfSwgY2xhc3NlczogJ2NsYXNzZXMtQScsIHBvc2l0aW9uOiB7eDogMjAwLCB5OiA1MH19LAoge2dyb3VwOiAnZWRnZXMnLCBkYXRhOiB7aWQ6ICdlMScsIG5hbWU6ICfmmK8nLCBzb3VyY2U6ICfmnY7kv4rmnbAnLCB0YXJnZXQ6ICfph47njKonfSxjbGFzc2VzOidyZWxhdGlvbkInfSwKIF0KICovCgpleHBvcnQgZnVuY3Rpb24gZmluZFJpc2tDaGFydEFQSShjb21wYW55TmFtZSkgewogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlCiAgY29uc29sZS5sb2coImZpbmRSaXNrQ2hhcnRBUEk6Y29tcGFueU5hbWUtLS0tIiArIGNvbXBhbnlOYW1lKTsKICByZXR1cm4gYXhpb3MoewogICAgdXJsOiAiIi5jb25jYXQoYXBpLmNoYXJ0UHJlLCAiL2ZpbmRSaXNrQ2hhcnQvIikuY29uY2F0KGNvbXBhbnlOYW1lKSwKICAgIG1ldGhvZDogJ0dFVCcKICB9KTsKfQovKioKICog5p+l6K+i5YWs5Y+455qE6K+m57uG5L+h5oGvCiAqIEBwYXJhbSBjb21wYW55TmFtZSDlhazlj7jlkI3np7AKICogQHJldHVybnMgeyp9IOi/lOWbnuS7i+e7je+8jOWFseacieWkmuWwkeWRmOW3pe+8jOmjjumZqeiuoeeul+eahOWFt+S9k+WFrOW8j++8jOacieWkmuWwkeWutuWtkOWFrOWPuOetieetiQogKiB7aWQ6JycsbmFtZTonJyxpbnRyb2R1Y3Rpb246JycsLi4uLi4uLH0KICovCgpleHBvcnQgZnVuY3Rpb24gZmluZERldGFpbEFQSShjb21wYW55TmFtZSkgewogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlCiAgY29uc29sZS5sb2coImZpbmREZXRhaWxBUEk6Y29tcGFueU5hbWUtLS0tIiArIGNvbXBhbnlOYW1lKTsKICByZXR1cm4gYXhpb3MoewogICAgdXJsOiAiIi5jb25jYXQoYXBpLmNoYXJ0UHJlLCAiL2ZpbmREZXRhaWwvIikuY29uY2F0KGNvbXBhbnlOYW1lKSwKICAgIG1ldGhvZDogJ0dFVCcKICB9KTsKfQovKioKICog5pCc57Si5qih57OK5p+l6K+iLOagueaNruS8oOi+k+eahOivjei/lOWbnuWMheaLrOivpeivjeeahOaJgOacieWFrOWPuOWIl+ihqAogKiBAcGFyYW0ga2V5V29yZCDnlKjmiLfovpPlhaXnmoTor40KICogQHJldHVybnMKICogW3tpZDogIiIsbmFtZTogIiIsfSwKICAgIHtpZDogIiIsbmFtZTogIiIsfSxdCiAqLwoKZXhwb3J0IGZ1bmN0aW9uIGdldE5hbWVMaXN0QVBJKGtleVdvcmQpIHsKICByZXR1cm4gYXhpb3MoewogICAgdXJsOiAiIi5jb25jYXQoYXBpLmNoYXJ0UHJlLCAiL2dldE5hbWVMaXN0LyIpLmNvbmNhdChrZXlXb3JkKSwKICAgIG1ldGhvZDogJ0dFVCcKICB9KTsKfQ=="},{"version":3,"sources":["/Users/amanda/sjjc_frontend/src/api/chart.js"],"names":["axios","api","chartPre","findRelatedCompaniesAPI","searchName","console","log","url","method","findUpCompaniesAPI","findRiskChartAPI","companyName","findDetailAPI","getNameListAPI","keyWord"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,iBAApB;AAEA,IAAMC,GAAG,GAAG;AACVC,EAAAA,QAAQ,EAAE;AADA,CAAZ;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,uBAAT,CAAiCC,UAAjC,EAA6C;AAClD;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,2CAAyCF,UAArD;AACA,SAAOJ,KAAK,CAAC;AACXO,IAAAA,GAAG,YAAKN,GAAG,CAACC,QAAT,mCAA0CE,UAA1C,CADQ;AAEXI,IAAAA,MAAM,EAAE;AAFG,GAAD,CAAZ;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA4BL,UAA5B,EAAwC;AAC7C;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,sCAAoCF,UAAhD;AACA,SAAOJ,KAAK,CAAC;AACXO,IAAAA,GAAG,YAAKN,GAAG,CAACC,QAAT,8BAAqCE,UAArC,CADQ;AAEXI,IAAAA,MAAM,EAAE;AAFG,GAAD,CAAZ;AAID;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,gBAAT,CAA0BC,WAA1B,EAAuC;AAC5C;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAY,qCAAmCK,WAA/C;AACA,SAAOX,KAAK,CAAC;AACXO,IAAAA,GAAG,YAAKN,GAAG,CAACC,QAAT,4BAAmCS,WAAnC,CADQ;AAEXH,IAAAA,MAAM,EAAE;AAFG,GAAD,CAAZ;AAID;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,aAAT,CAAuBD,WAAvB,EAAoC;AACzC;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAY,kCAAgCK,WAA5C;AACA,SAAOX,KAAK,CAAC;AACXO,IAAAA,GAAG,YAAKN,GAAG,CAACC,QAAT,yBAAgCS,WAAhC,CADQ;AAEXH,IAAAA,MAAM,EAAE;AAFG,GAAD,CAAZ;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,cAAT,CAAwBC,OAAxB,EAAiC;AACtC,SAAOd,KAAK,CAAC;AACXO,IAAAA,GAAG,YAAKN,GAAG,CAACC,QAAT,0BAAiCY,OAAjC,CADQ;AAEXN,IAAAA,MAAM,EAAE;AAFG,GAAD,CAAZ;AAID","sourcesContent":["import {axios} from '@/utils/request'\n\nconst api = {\n  chartPre: '/api/chart'\n}\n\n/**\n * 搜索公司名或人名得到与其有关的公司,及各个公司中的最大股东，返回知识图谱的数据\n * @param searchName 搜索的公司名或人名\n * @returns {*} 返回下级控股公司，以及各个公司的最大股东\n * [\n {group: 'nodes', data: {'id': 'n1', 'name': '李俊杰 ',}, classes: 'classes-A', position: {x: 200, y: 50}},\n {group: 'edges', data: {id: 'e1', name: '是', source: '李俊杰', target: '野猪'},classes:'relationB'},\n ]\n TODO:classes根据后端命名来\n */\n\nexport function findRelatedCompaniesAPI(searchName) {\n  // eslint-disable-next-line no-console\n  console.log(\"findRelatedCompaniesAPI:searchName----\"+searchName)\n  return axios({\n    url: `${api.chartPre}/findRelatedCompanies/${searchName}`,\n    method: 'GET',\n  })\n}\n\n/**\n * 向上查询该公司是否有上级公司控制，查询找到最终控股人/公司\n * @param searchName\n * @returns {*} 返回有最终控股人的知识图谱，\n * [\n {group: 'nodes', data: {'id': 'n1', 'name': '李俊杰 ',}, classes: 'classes-A', position: {x: 200, y: 50}},\n {group: 'edges', data: {id: 'e1', name: '是', source: '李俊杰', target: '野猪'},classes:'relationB'},\n ]\n * TODO:最终返回多少数据还要讨论一下\n */\nexport function findUpCompaniesAPI(searchName) {\n  // eslint-disable-next-line no-console\n  console.log(\"findUpCompaniesAPI:searchName----\"+searchName)\n  return axios({\n    url: `${api.chartPre}/findUpCompanies/${searchName}`,\n    method: 'GET',\n  })\n}\n\n\n/**\n * 查询公司风险，返回包括风险的知识图谱数据\n * @param companyName 公司名称\n * @returns {*} 返回计算风险涉及到的公司，以及。。。\n * [\n {group: 'nodes', data: {'id': 'n1', 'name': '李俊杰 ',}, classes: 'classes-A', position: {x: 200, y: 50}},\n {group: 'edges', data: {id: 'e1', name: '是', source: '李俊杰', target: '野猪'},classes:'relationB'},\n ]\n */\nexport function findRiskChartAPI(companyName) {\n  // eslint-disable-next-line no-console\n  console.log(\"findRiskChartAPI:companyName----\"+companyName)\n  return axios({\n    url: `${api.chartPre}/findRiskChart/${companyName}`,\n    method: 'GET',\n  })\n}\n\n/**\n * 查询公司的详细信息\n * @param companyName 公司名称\n * @returns {*} 返回介绍，共有多少员工，风险计算的具体公式，有多少家子公司等等\n * {id:'',name:'',introduction:'',......,}\n */\nexport function findDetailAPI(companyName) {\n  // eslint-disable-next-line no-console\n  console.log(\"findDetailAPI:companyName----\"+companyName)\n  return axios({\n    url: `${api.chartPre}/findDetail/${companyName}`,\n    method: 'GET',\n  })\n}\n\n/**\n * 搜索模糊查询,根据传输的词返回包括该词的所有公司列表\n * @param keyWord 用户输入的词\n * @returns\n * [{id: \"\",name: \"\",},\n    {id: \"\",name: \"\",},]\n */\nexport function getNameListAPI(keyWord) {\n  return axios({\n    url: `${api.chartPre}/getNameList/${keyWord}`,\n    method: 'GET',\n  })\n}\n\n"]}]}