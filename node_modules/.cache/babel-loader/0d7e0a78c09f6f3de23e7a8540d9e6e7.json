{"remainingRequest":"C:\\Users\\pc\\Desktop\\cytoscape.js-master\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\pc\\Desktop\\cytoscape.js-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\pc\\Desktop\\cytoscape.js-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\pc\\Desktop\\cytoscape.js-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\pc\\Desktop\\cytoscape.js-master\\src\\views\\components\\cjs.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\pc\\Desktop\\cytoscape.js-master\\src\\views\\components\\cjs.vue","mtime":1615298992926},{"path":"C:\\Users\\pc\\Desktop\\cytoscape.js-master\\.babelrc","mtime":1601447864000},{"path":"C:\\Users\\pc\\Desktop\\cytoscape.js-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\cytoscape.js-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\cytoscape.js-master\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\pc\\Desktop\\cytoscape.js-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\pc\\Desktop\\cytoscape.js-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport cytoscape from 'cytoscape';\nimport cxtmenu from 'cytoscape-cxtmenu';\nimport cola from 'cytoscape-cola';\nimport avsdf from 'cytoscape-avsdf';\nimport coseBilkent from 'cytoscape-cose-bilkent';\nexport default {\n  name: \"CJS\",\n  beforeCreate: function beforeCreate() {\n    this.$cy && this.$cy.destroyed() && this.$cy.destroy();\n    delete this.$cy;\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$cy && this.$cy.destroyed() && this.$cy.destroy();\n    delete this.$cy;\n  },\n  watch: {},\n  props: {},\n  mounted: function mounted() {\n    // Cxtmenu圆形菜单主要依赖组件\n    if (!cytoscape().cxtmenu) {\n      cytoscape.use(cxtmenu);\n      cytoscape.use(cola);\n      cytoscape.use(avsdf);\n      cytoscape.use(coseBilkent);\n    }\n\n    this.$cy = cytoscape({\n      // initial viewport state:\n      zoom: 1,\n      // 图表的初始缩放级别.可以设置options.minZoom和options.maxZoom设置缩放级别的限制.\n      pan: {\n        x: 0,\n        y: 0\n      },\n      // 图表的初始平移位置.\n      // interaction options:\n      minZoom: 1e-50,\n      // 图表缩放级别的最小界限.视口的缩放比例不能小于此缩放级别.\n      maxZoom: 1e50,\n      // 图表缩放级别的最大界限.视口的缩放比例不能大于此缩放级别.\n      zoomingEnabled: true,\n      // 是否通过用户事件和编程方式启用缩放图形.\n      userZoomingEnabled: true,\n      // 是否允许用户事件(例如鼠标滚轮,捏合缩放)缩放图形.对此缩放的编程更改不受此选项的影响.\n      panningEnabled: true,\n      // 是否通过用户事件和编程方式启用平移图形.\n      userPanningEnabled: true,\n      // 是否允许用户事件(例如拖动图形背景)平移图形.平移的程序化更改不受此选项的影响.\n      boxSelectionEnabled: true,\n      // 是否启用了框选择(即拖动框叠加,并将其释放为选择).如果启用,则用户必须点击以平移图表.\n      selectionType: 'single',\n      // 一个字符串，指示用户输入的选择行为.对于'additive',用户进行的新选择将添加到当前所选元素的集合中.对于'single',用户做出的新选择成为当前所选元素的整个集合.\n      touchTapThreshold: 8,\n      // 非负整数,分别表示用户在轻击手势期间可以在触摸设备和桌面设备上移动的最大允许距离.这使得用户更容易点击.\n      // 这些值具有合理的默认值,因此建议不要更改这些选项,除非您有充分的理由这样做.大值几乎肯定会产生不良后果.\n      desktopTapThreshold: 4,\n      // 非负整数,分别表示用户在轻击手势期间可以在触摸设备和桌面设备上移动的最大允许距离.这使得用户更容易点击.\n      // 这些值具有合理的默认值,因此建议不要更改这些选项,除非您有充分的理由这样做.大值几乎肯定会产生不良后果.\n      autolock: false,\n      // 默认情况下是否应锁定节点(根本不可拖动,如果true覆盖单个节点状态).\n      autoungrabify: false,\n      // 默认情况下节点是否不允许被拾取(用户不可抓取,如果true覆盖单个节点状态).\n      autounselectify: false,\n      // 默认情况下节点是否允许被选择(不可变选择状态,如果true覆盖单个元素状态).\n      // rendering options:\n      headless: false,\n      // true:空运行,不显示不需要容器容纳.false:显示需要容器容纳.\n      styleEnabled: true,\n      // 一个布尔值,指示是否应用样式.\n      hideEdgesOnViewport: true,\n      // 渲染提示,设置为true在渲染窗口时,不渲染边.例如,移动某个顶点时或缩放时,边信息会被临时隐藏,移动结束后,边信息会被执行一次渲染.由于性能增强,此选项现在基本上没有实际意义.\n      hideLabelsOnViewport: true,\n      // 渲染提示,当设置为true使渲染器在平移和缩放期间使用纹理而不是绘制元素时,使大图更具响应性.由于性能增强,此选项现在基本上没有实际意义.\n      textureOnViewport: true,\n      // 渲染提示,当设置为true使渲染器在平移和缩放期间使用纹理而不是绘制元素时,使大图更具响应性.由于性能增强,此选项现在基本上没有实际意义.\n      motionBlur: true,\n      // 渲染提示,设置为true使渲染器使用运动模糊效果使帧之间的过渡看起来更平滑.这可以增加大图的感知性能.由于性能增强,此选项现在基本上没有实际意义.\n      motionBlurOpacity: 0.2,\n      // 当motionBlur:true,此值控制运动模糊帧的不透明度.值越高,运动模糊效果越明显.由于性能增强,此选项现在基本上没有实际意义.\n      wheelSensitivity: 0.3,\n      // 缩放时更改滚轮灵敏度.这是一个乘法修饰符.因此,0到1之间的值会降低灵敏度(变焦较慢),而大于1的值会增加灵敏度(变焦更快).\n      pixelRatio: 'auto',\n      // 使用手动设置值覆盖屏幕像素比率(1.0建议,如果已设置).这可以通过减少需要渲染的有效区域来提高高密度显示器的性能,\n      // 尽管在最近的浏览器版本中这是不太必要的.如果要使用硬件的实际像素比,可以设置pixelRatio: 'auto'(默认).\n      // DOM容器,决定内容展示的位置,方式一(原生):document.getElementById('xx'),方式二(jQuery):$('#xx')\n      container: document.getElementById('cytoscape_id'),\n      // 一个指定布局选项的普通对象.\n      layout: {\n        name: 'random'\n      }\n    }); // Cxtmenu圆形菜单--开始\n\n    this.$cy.cxtmenu({\n      menuRadius: 80,\n      // the radius of the circular menu in pixels\n      selector: 'node',\n      // elements matching this Cytoscape.js selector will trigger cxtmenus\n      fillColor: 'rgba(0, 0, 0, 0.75)',\n      // 指令默认颜色(the background colour of the menu)\n      activeFillColor: 'rgba(1, 105, 217, 0.75)',\n      // 所选指令的颜色(the colour used to indicate the selected command)\n      activePadding: 10,\n      // additional size in pixels for the active command\n      indicatorSize: 14,\n      // the size in pixels of the pointer to the active command\n      separatorWidth: 4,\n      //连续命令之间的空白间隔(以像素为单位)\n      spotlightPadding: 10,\n      //元素和聚光灯之间的额外间距(以像素为单位)\n      minSpotlightRadius: 10,\n      // the minimum radius in pixels of the spotlight\n      maxSpotlightRadius: 14,\n      // the maximum radius in pixels of the spotlight\n      openMenuEvents: 'cxttapstart taphold',\n      // space-separated cytoscape events that will open the menu; only `cxttapstart` and/or `taphold` work here\n      itemColor: 'white',\n      // 各指令元素内字体颜色\n      itemTextShadowColor: 'red',\n      // 各指令元素内字体阴影颜色\n      zIndex: 9999,\n      // the z-index of the ui div\n      atMouse: true // draw menu at mouse position\n\n    }); //Cxtmenu圆形菜单--结束\n    // 节点的样式\n\n    this.$cy.style().selector('.classes-A').css({\n      'background-color': '#6FB1FC',\n      'content': 'data(name)',\n      'border-color': '#6FB1FC',\n      'border-width': \"5px\"\n    }) // .style({'background-color': '#FF0000', 'border-color': '#FF0000', 'border-width': \"1px\",})\n    .selector('.classes-B').css({\n      'background-color': '#F5A45D',\n      'content': 'data(name)',\n      'border-color': '#F5A45D',\n      'border-width': \"5px\"\n    }) // // .style({'background-color': '#00FF00', 'border-color': '#00FF00', 'border-width': \"1px\",})\n    // .selector('.classes-C')\n    // // .style({'background-color': '#0000FF', 'border-color': '#0000FF', 'border-width': \"1px\",})\n    // .css({'background-color': '#b88cea', 'content': 'data(name)','border-color':'#b88cea','border-width':\"5px\"})\n    // .selector('.classes-D')\n    // .css({'background-color': '#83fd84', 'content': 'data(name)','border-color':'#83fd84','border-width':\"5px\"})\n    ; // 通用的样式\n\n    this.$cy.style()\n    /*未选择节点样式*/\n    .selector('node').style({\n      'label': 'data(name)',\n      'font-size': '10pt',\n      'width': '8pt',\n      'height': '8pt'\n    })\n    /*已选择节点样式*/\n    .selector('node:selected').style({\n      'border-color': '#c84e40',\n      'border-width': \"1px\"\n    })\n    /*未选择节点样式*/\n    .selector('edge').style({\n      'label': 'data(name)',\n      'target-arrow-shape': 'triangle-backcurve',\n\n      /*箭头样式*/\n      'target-arrow-size': '1px',\n\n      /*箭头大小*/\n      'target-arrow-color': '#999999',\n\n      /*箭头颜色*/\n      'curve-style': 'bezier',\n\n      /*线条样式曲线*/\n      'line-color': '#999999',\n\n      /*线条颜色*/\n      'width': '1px',\n\n      /*线条宽度*/\n      'font-size': '10px',\n\n      /*标签字体大小*/\n      'color': '#000000',\n\n      /*标签字体大小*/\n      'text-outline-color': 'white',\n\n      /*文本轮廓颜色*/\n      'text-outline-width': '1px',\n\n      /*文本轮廓宽度*/\n      'text-rotation': 'autorotate'\n      /*标签方向*/\n\n    })\n    /*已选择节点样式*/\n    .selector('edge:selected').style({\n      'color': '#3165fc',\n\n      /*标签字体大小*/\n      'target-arrow-color': '#61bffc',\n\n      /*箭头颜色*/\n      'line-color': '#61bffc'\n      /*线条颜色*/\n\n    })\n    /*高亮样式*/\n    .selector('.light-off').style({\n      'opacity': '0.1'\n    });\n  },\n  data: function data() {\n    return {};\n  },\n  methods: {\n    /**\n     * eles : Array or Map.\n     * node_eg: {group: 'nodes', data: {id: 'nid1', name: 'name1', label: 'l1 l2', others: 'others'}, classes: 'like label', position: {x: 100, y: 100}};\n     * edge_eg: {group: 'edges', data: {id: 'eid1', name: 'name1', source: 'A', target: 'B', label: 'l1 l2', others: 'others'}, classes: 'like label', position: {x: 100, y: 100}};\n     * node_eg: [\n     *   {group: 'nodes', data: {id: 'nid1', name: 'name1', label: 'l1 l2', others: 'others'}, classes: 'like label', position: {x: 100, y: 100}};\n     *   {group: 'nodes', data: {id: 'nid2', name: 'name2', label: 'l1 l2', others: 'others'}, classes: 'like label', position: {x: 100, y: 100}};\n     * ];\n     * edge_eg: [\n     *   {group: 'edges', data: {id: 'eid1', name: 'name1', source: 'nid1', target: 'nid2', label: 'l1 l2', others: 'others'}, classes: 'like label', position: {x: 100, y: 100}};\n     *   {group: 'edges', data: {id: 'eid2', name: 'name1', source: 'nid2', target: 'nid3', label: 'l1 l2', others: 'others'}, classes: 'like label', position: {x: 100, y: 100}};\n     * ];\n     * @param eles 元素集合.\n     */\n    //TODO:在此编辑添加节点/关系的方法\n    add: function add() {},\n    //增加节点或边\n    addEles: function addEles(eles) {\n      var _this = this;\n\n      if (eles) {\n        this.$cy.startBatch();\n        this.$cy.batch(function () {\n          var elements = (Array.isArray ? Array.isArray(eles) : null != eles && eles instanceof Array) ? eles : [eles];\n          var filterElements = elements.filter(function (__) {\n            return !_this.$cy.getElementById(__.data.id).length;\n          });\n\n          _this.$cy.add(filterElements);\n        });\n        this.$cy.endBatch();\n      }\n    },\n\n    /**\n     * 删除选择的内容(可能是顶点, 也可能是关系)\n     */\n    delEles: function delEles() {\n      var _this2 = this;\n\n      this.$cy.startBatch();\n      this.$cy.batch(function () {\n        var selectedEles = _this2.$cy.elements(':selected'); // 未选择不进行操作\n\n\n        if (!selectedEles || 1 > selectedEles.length) {\n          return false;\n        }\n\n        selectedEles.remove();\n      });\n      this.$cy.endBatch();\n    },\n\n    /***************************工具栏************************/\n\n    /**\n     * 导出全局图片.\n     */\n    exportPng: function exportPng() {\n      var blob = this.$cy.png({\n        output: 'blob',\n        bg: 'transparent',\n        full: true,\n        scale: 4,\n        quality: 1\n      });\n      var _ref = [document.createElement('a'), document.createEvent(\"HTMLEvents\")],\n          aLink = _ref[0],\n          evt = _ref[1];\n      evt.initEvent(\"click\", true, true);\n      var _ref2 = [\"\".concat(new Date().getTime(), \".png\"), URL.createObjectURL(blob)];\n      aLink.download = _ref2[0];\n      aLink.href = _ref2[1];\n      aLink.dispatchEvent(evt);\n      aLink.click();\n    },\n    resize: function resize() {\n      this.$cy.fit();\n    },\n    zoom: function zoom(val) {\n      this.zoom(val);\n    }\n    /***************************工具栏************************/\n\n  }\n};",null]}