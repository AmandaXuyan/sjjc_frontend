{"remainingRequest":"/Users/amanda/sjjc_frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/amanda/sjjc_frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/amanda/sjjc_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/amanda/sjjc_frontend/src/views/components/cjs.vue?vue&type=template&id=5402ece6&scoped=true&","dependencies":[{"path":"/Users/amanda/sjjc_frontend/src/views/components/cjs.vue","mtime":1622795035650},{"path":"/Users/amanda/sjjc_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/amanda/sjjc_frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/amanda/sjjc_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/amanda/sjjc_frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}